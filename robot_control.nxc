// Felipe Dienstmann Musse (dienstmf)
// JoÃ£o Pedro Meireles (mullermj)
// Matheus Schuh (schuhm)

/* CONSTANTS DEFINITION */

// characteristics of the robot

#define L 13.25 // cm
#define R 2.675 // cm

// desired behavior of the robot

#define THETA_C 0
#define Y_C 30 // cm
#define V 20 // cm/s

// feedback matrix

#define K_Y 1/V
#define K_THETA 0.25

// sensors and actuators

#define RIGHT_MOTOR OUT_B
#define LEFT_MOTOR OUT_C
#define US IN_1

// limits

#define W_MAX 100

/* GLOBAL VARIABLES */

// measures
float y_measured;
float theta_measured;
float previous_y_measured;

// robot state and behavior
float theta;
float y;
float w;
float w_right;
float w_left;

/* FUNCTIONS DEFINITION */

sub init() {

  SetSensorUltrasonic(US);
  previous_y_measured = SensorUS(US);
}

sub measure() {

  y_measured = SensorUS(US);
  theta_measured = y_measured - previous_y_measured;
  previous_y_measured = y_measured;
}

sub calculate() {

  y = y_measured - Y_C;
  theta = theta_measured - THETA_C;
  w = -K_Y * y -K_THETA * theta;
  w_right = (4 * V + L * w) / 4 * R;
  w_left = (4 * V - L * w) / 4 * R; 
}

sub limit_w() {

  if (w_right > W_MAX)
    w_right = W_MAX;
  if (w_left > W_MAX)
    w_left = W_MAX;
    
  if (w_right < -W_MAX)
    w_right = -W_MAX;
  if (w_left < -W_MAX)
    w_left = -W_MAX;  
}

sub output() {

  limit_w();
  OnFwdReg(RIGHT_MOTOR, w_right, OUT_REGMODE_SPEED);
  OnFwdReg(LEFT_MOTOR, w_left, OUT_REGMODE_SPEED);
}

task main() {
  
  init();

  while(1) {
  
  measure();
  output();
  calculate();
  Wait(50);
  
  }
}
